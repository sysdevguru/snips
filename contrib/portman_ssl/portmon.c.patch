*** portmon.c	Sun Jul  8 18:48:28 2001
--- ssl_portmon.c	Wed May 26 15:32:37 2004
***************
*** 30,36 ****
  
  /* Copyright 2001, Netplex Technologies Inc. */
  
- 
  /*  */
  #ifndef lint
  static char rcsid[] = "$Id: portmon.c.patch,v 1.1 2004/05/31 08:12:51 russell Exp $" ;
--- 30,35 ----
***************
*** 38,43 ****
--- 37,47 ----
  
  #include "portmon.h"
  
+ #ifdef WITH_SSL
+ #include <openssl/ssl.h>
+ extern SSL_CTX *ctx;
+ #endif
+ 
  extern char	*skip_spaces() ;		/* in libsnips */
  extern char	*Strcasestr();			/* like strstr() */
  
***************
*** 53,59 ****
--- 57,67 ----
  {
    int i, nleft;
    int maxfd = 0;
+   int rv = 0;
    int sockarray[MAXSIMULCONNECTS];
+ #ifdef WITH_SSL
+   SSL *ssl[MAXSIMULCONNECTS];
+ #endif
    time_t elapsedsecs = 0;
    fd_set rset, wset;
  
***************
*** 80,85 ****
--- 88,99 ----
        return (-1);	/* fatal error */
      }
  
+ #ifdef WITH_SSL
+     ssl[i] = SSL_new(ctx);
+     if ( debug ) fprintf (stderr, " (debug) SSL_new(), ssl[%d] = %x\n", i, ssl[i]);
+     if ( NULL == ssl[i] ) perror("Failed to create SSL handle.\n");
+ #endif
+ 
      /* NBconnect() will return zero/positive if it gets an immediate
       * connection, else it will set errno.
       */
***************
*** 97,102 ****
--- 111,120 ----
  	FD_SET(sockarray[i], &rset);
  	FD_SET(sockarray[i], &wset);
  	if (sockarray[i] > maxfd) maxfd = sockarray[i];
+ #ifdef WITH_SSL
+         if ( 0 == SSL_set_fd(ssl[i], (int) sockarray[i]) ) perror("Failed to tie SSL to socket.\n");
+         SSL_set_connect_state(ssl[i]);
+ #endif
      }
  
    }	/* for (i = 1..nhosts) */
***************
*** 114,120 ****
      {
        for (i = 0; i < nhosts; ++i)
  	close(sockarray[i]);
!       return 0;
      }
      tval.tv_sec = rtimeout - elapsedsecs;
      tval.tv_usec = 0;
--- 132,139 ----
      {
        for (i = 0; i < nhosts; ++i)
  	close(sockarray[i]);
!       rv = 0;
!       break; /* while loop */
      }
      tval.tv_sec = rtimeout - elapsedsecs;
      tval.tv_usec = 0;
***************
*** 129,135 ****
        if (n < 0 && errno != EINTR)
        {
  	perror("select()");
! 	return (-1);	/* fatal ?? */
        }
        else
        {
--- 148,155 ----
        if (n < 0 && errno != EINTR)
        {
  	perror("select()");
! 	rv = -1;	/* fatal ?? */
!         break; /* while loop */
        }
        else
        {
***************
*** 177,186 ****
--- 197,214 ----
  	  hv[i]->elapsedsecs = elapsedsecs;	/* store elapsed time */
  
  	  if (FD_ISSET(sockarray[i], &ws))
+ #ifdef WITH_SSL
+ 	    send_hoststring(ssl[i], sockarray[i], hv[i]);
+ #else
  	    send_hoststring(sockarray[i], hv[i]);
+ #endif
  
  	  if (FD_ISSET(sockarray[i], &rs) || hv[i]->responselist == NULL)
+ #ifdef WITH_SSL
+ 	    if ( process_host(ssl[i], sockarray[i], hv[i]) == 1 )
+ #else
  	    if ( process_host(sockarray[i], hv[i]) == 1 )
+ #endif
  	    {
  	      FD_CLR(sockarray[i], &rset); FD_CLR(sockarray[i], &wset);
  	      close(sockarray[i]);	/* ensure this is closed */
***************
*** 205,214 ****
    if (nleft && debug > 1)
      fprintf(stderr, " %d devices unprocessed (no response)\n", nleft);
  
!   for (i = 0; i < nhosts; ++i)		/* close any open sockets */
      close(sockarray[i]);
  
!   return (0);
  
  }	/* check_ports() */
  
--- 233,247 ----
    if (nleft && debug > 1)
      fprintf(stderr, " %d devices unprocessed (no response)\n", nleft);
  
!   for (i = 0; i < nhosts; ++i) {	/* close any open sockets */
! #ifdef WITH_SSL
!      if (debug) fprintf(stderr,"SSL_free ssl[%d] = %x\n", i, ssl[i]);
!      SSL_free(ssl[i]);
! #endif
      close(sockarray[i]);
+   } /* end for */
  
!   return (rv);
  
  }	/* check_ports() */
  
***************
*** 215,227 ****
  /*+
   * Send a string to a host
   */
  send_hoststring(sock, h)
    int sock;		/* connected socket */
    struct _harray *h;
  {
    int n;
  
!   if (debug)
      fprintf(stderr, " (debug) send_hoststring('%s:%d')\n", h->hname, h->port);
  
    /* if socket is non-blocking, undo this flag */
--- 248,265 ----
  /*+
   * Send a string to a host
   */
+ #ifdef WITH_SSL
+ send_hoststring(ssl, sock, h)
+    SSL *ssl;
+ #else
  send_hoststring(sock, h)
+ #endif
    int sock;		/* connected socket */
    struct _harray *h;
  {
    int n;
  
!   if (debug > 1)
      fprintf(stderr, " (debug) send_hoststring('%s:%d')\n", h->hname, h->port);
  
    /* if socket is non-blocking, undo this flag */
***************
*** 234,240 ****
--- 272,282 ----
      return 1;
  
    /* send our string */
+ #ifdef WITH_SSL
+   if ( (n = SSL_write(ssl, h->wptr, strlen(h->wptr))) < 0)
+ #else
    if ( (n = write(sock, h->wptr, strlen(h->wptr))) < 0)
+ #endif
    {
      if (errno == EWOULDBLOCK)
        return 0;
***************
*** 276,282 ****
--- 318,329 ----
   * 	Checks the port for the structure _harray passed to it.
   * Return value is '1' if finished processing, '0' if yet to finish.
   */
+ #ifdef WITH_SSL
+ process_host(ssl, sock, h)
+   SSL *ssl;
+ #else
  process_host(sock, h)
+ #endif
    int sock;		/* connected socket */
    struct _harray *h;
  {
***************
*** 303,309 ****
--- 350,360 ----
        h->testseverity = E_INFO;
        h->status = 1;		  	/* device up */
        if (h->quitstr && *(h->quitstr))
+ #ifdef WITH_SSL
+ 	SSL_write(ssl, h->quitstr, strlen(h->quitstr));
+ #else
  	write(sock, h->quitstr, strlen(h->quitstr));
+ #endif
        close (sock);
        return(1);	/* done testing */
      }
***************
*** 310,316 ****
--- 361,371 ----
  
    /* now fill any remaining read buffer space we have */
    buflen = h->readbuf + READBUFLEN - h->rptr;	/* amount we can read*/
+ #ifdef WITH_SSL
+   n = SSL_read(ssl, h->rptr, buflen - 1);
+ #else
    n = read(sock, h->rptr, buflen - 1);
+ #endif
  #ifdef DEBUG  	/* */
    if (debug > 2)
      fprintf(stderr, "  read %d bytes from %s:%d\n", n, h->hname, h->port);
***************
*** 389,395 ****
--- 444,455 ----
      h->status = 0;
  
    if (h->quitstr && *(h->quitstr))
+ #ifdef WITH_SSL
+     SSL_write(ssl, h->quitstr, strlen(h->quitstr));
+ #else
      write(sock, h->quitstr, strlen(h->quitstr));
+ #endif
+ 
    close(sock);
  
    return(1);	/* done processing */
