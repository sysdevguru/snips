#!/usr/local/bin/perl 
##
# $Header: /home/cvsroot/snips/perl-monitors/snmpgeneric,v 1.1 2002/01/30 05:02:48 vikas Exp $
#
#  snmpgeneric - perl monitor for generic SNMP variables.
# 	Directly monitors SNMP variables from the hosts listed.
#	Can query a single variable, or walk a tree and total up
#	the results, based on a perl regex that gets evaluated for
#	each variable returned.
#
#  AUTHOR:	 Ed Landa, elanda@comstar.net, May 1999
#
#####################
#
# DESCRIPTION HERE
#
# Supplemental Packages Required:
#
# snmpget
#
# Files used:
#
# Snips event elements used:
#   sender                     "snmpgeneric"
#   device
#    name                      the SNMP unit's name
#    addr                      the SNMP unit's IP address
#   var                       
#    name                      dependant on the config file
#    threshold                 as read from the config file
#    units                     always "snmp"
#
## 
##

use strict;
use vars qw ( $snipsroot $debug $etcdir $bindir $snmpget $snmpwalk $mibfile
	      $numtries $varunits
	      @deviceip @oid @community @comp @wlevel @elevel @clevel
	    );

BEGIN {
  $snipsroot = "/usr/local/snips"  unless $snipsroot;	# SET_THIS
  push (@INC, "$snipsroot/etc"); push (@INC, "$snipsroot/bin");
  require "snipsperl.conf" ;		# local customizations
}

use SNIPS;

############################
## Variables customization #  overrides values in the snipslib.pl library
############################
$etcdir  = "$snipsroot/etc"  unless $etcdir;	# location of config file
$bindir  = "$snipsroot/bin"  unless $bindir;

$snmpget  = "$bindir/snmpget" unless $snmpget ;	# location of snmpget
$snmpwalk = "$bindir/snmpwalk" unless $snmpwalk;# location of snmpwalk
$mibfile = "$etcdir/mib-v2.txt" unless $mibfile;# location of MIB file SET_THIS
$ENV{"MIBFILE"}= $mibfile ;
$ENV{"MIBFILE_v2"}= $mibfile ;

$numtries = 2;   # number of times to try and connect before failing
$debug = 0;				# set to 1 for debugging output
$varunits="snmp" ;			# the var.units field in EVENT struct
$s_pollinterval= 60*5;       		# Seconds to sleep between tries.

##########################

-x $snmpget || die("Could not find executable $snmpget, exiting");
-x $snmpwalk || die("Could not find executable $snmpwalk, exiting");

##
# Read the config file. Use '\t' as a separator for 'item'
sub readconf  {
  my $lineno = 0;
  my $count = 0;
  my $event = new_event();
  my $buffer = "BOGUS";

  if ($debug == 0 && $libdebug > 0) {
    ++$debug ; --$libdebug;
  }
  $s_sender = 'snmpgeneric' if ($s_sender eq "");

  open(CONFIG,"<$s_configfile")||die("Couldn't find $s_configfile, exiting");
  my $datafd = open_datafile($s_datafile, "w");
  # alter_event($event, $s_sender, undef, undef, undef, undef, $varunits);
  undef @deviceip; undef @oid; undef @comp ;
  undef @wlevel; undef @elevel; undef @clevel;

  while(<CONFIG>)
  {
    ++$lineno;
    chomp;
    if(/^\s*\#/) {next;}   	# skip comments
    if(/^\s*$/) {next;}		# skip blank lines

    if (/^(sleepinterval)\s+(\d+)\s*$/i || /^(pollinterval)\s+(\d+)\s*$/i) {
      $s_pollinterval = $2;
      next;
    }
    
    if (/^\s*RRDTOOL\s+ON/i)  { $SNIPS::dorrd = 1; next; }
    if (/^\s*RRDTOOL\s+OFF/i) { $SNIPS::dorrd = 0; next; }

    if (/\s*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s*$/)
    {   # this is an snmpget line
      ++$count;
      my ($ip, $port) = split(/:/, $2, 2);
      ($deviceip[$count] , $oid[$count] , $community[$count]) = ($ip, $3, $5);
      ($wlevel[$count] , $elevel[$count] , $clevel[$count]) = ($6, $7, $8);
      # alter_event($event, undef, $1, $ip, undef, $4, undef);
      $buffer = $4;
      alter_event($event, $s_sender, $1, $ip, under, $buffer, $varunits);
      write_event($datafd, $event);
      next;
    }
    if (/\s*(\S+)\s+(\S+)\s+(\+\S+)\s+(\S+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s*$/)
      #                           ^^                                               ^^^^^
    {      # We're checking for a snmpwalk config line
      ++$count;
      my ($ip, $port) = split(/:/, $2, 2);
      ($deviceip[$count] , $oid[$count] , $community[$count]) = ($ip, $3, $5);
      ($wlevel[$count] , $elevel[$count] , $clevel[$count]) = ($6, $7, $8);
      $comp[$count] = $9;	# comparison regex
      # alter_event($event, undef, $1, $ip, undef, $4, undef);
      $buffer = $4;
      alter_event($event, $s_sender, $1, $ip, undef, $buffer, $varunits);
      write_event($datafd, $event);
      next;
    }
    print "Ignoring illegal line: $_\n";
    
  }		# end while(CONFIG)
  
  close(CONFIG);
  if ( $count < 1) { die("Nothing to monitor in $s_configfile, exiting"); }
  if ($debug) {
    print "Devices to monitor are: " ;
    for my $i (1..$count) { print "\t$deviceip[$i]  $oid[$i]\n"; }
  }
  close_datafile($datafd);

}	# end: sub(readconf)
  
  
# Return   status, value, threshold, maxseverity
sub dotest {
  my ($event, $i) = @_;		# $i starts from 1, not 0
  my $value = 0;
  my $cmd = "";

  # Check if a port number is attached to $router:$port
  my ($routerip, $port) = split(/:/, $deviceip[$i], 2);
  my $myoid = $oid[$i];

  if ($debug > 2) { print "Checking $routerip\n"; }
  
  # If the OID starts with a plus then we walk the tree and add the values
  if ($myoid =~ /^\+/)
  {
    $myoid =~ s/^\+(.*)$/\1/;	# remove the leading +
    if ($port) { $cmd = "$snmpwalk -p $port $routerip $community[$i] $myoid";}
    else { $cmd = "$snmpwalk $routerip $community[$i] $myoid"; }

    open (WALK, "$cmd |") || die "Could not run \"$cmd\"\n";
    while (<WALK>)
    {
      chomp;
      my $line=$_;
      print "$line\n" if ($debug > 1);
      $line =~ s/^.*INTEGER:\s*(.*)$/\1/; # we only want the variable
      if ($line =~ /\(.*\)/)	# if MIB matched, only get the numeric
      {
	$line =~ s/^.*\(\s*(\d+)\s*\).*$/\1/; # chop off text descrip if there
      }
      print "LINE=$line\n" if ($debug > 1);
      my $comp = $comp[$i];
      $comp =~ s/\*/$line/g;
      my $result = eval $comp;		# evaluate the string
      print "\tregexp=$comp\n\tresult=$result\n" if ($debug > 1);
      $value += $result;
    } 
    close(WALK);
    print "Total value=$value\n" if ($debug > 1);
  }
  else	# OID does not start with a leading +
  {
    if ($port) { $cmd = "$snmpget -p $port $routerip $community[$i] $myoid";}
    else { $cmd = "$snmpget $routerip $community[$i] $myoid"; }
    print "cmd=$cmd\n" if $debug;

    my $line="";
    my $tries = $numtries;
    while (($tries) && (! (($line =~ /INTEGER/)||($line =~ /Timeticks/)) ) )
    {
      $line = `$cmd`;
      print "LINE=$line" if ($debug > 1);
      --$tries;
    }
    if ($tries)	{ # did not timeout
      $line =~ s/^.*INTEGER:\s*(.*)$/\1/; # we only want the variable
      if ($line =~ /\(.*\)/)	#  if MIB matched, only get the numeric
      {
	$line =~ s/^.*\(\s*(\d+)\s*\).*$/\1/; # chop off text descrip if there
      }
      $value=$line;
    }
    print "Value=$value\n" if ($debug > 1);
  }

  $value = 0 if ($value < 0);		# negative status to be ignored
  
  my ($status, $threshold, $severity) =
    calc_status($value, $wlevel[$i], $elevel[$i], $clevel[$i]);
  # status, value, thres, maxseverity
  return ($status, $value, $threshold, $severity);

}		# end &dotest()

###
### Main program:
###

&snips_main(\&readconf, undef, \&dotest);

