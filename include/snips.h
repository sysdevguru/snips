/*	$Header: /home/cvsroot/snips/include/snips.h,v 1.1 2008/04/25 23:31:50 tvroon Exp $	*/

#ifndef _snips_h
# define _snips_h

#include "version.h"
#include "osdefs.h"
#ifdef HAVE_CONFIG_H
# include <config.h>          /* generated by autoconf */
#endif

/* need these include files for inet routines */
#include <sys/types.h>
#include <stdio.h>
#include <errno.h>
#ifndef NeXT
# include <unistd.h>			/* for access(), lseek()  */
#endif	/* NeXT */
#include <time.h>			/* AIX wants time.h */
#include <sys/time.h>

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <sys/file.h>
#include <sys/stat.h>
#include <fcntl.h>
#ifdef AIX
# include <sys/select.h>		/* all fd_set definitions here */
#endif

#ifdef SVR4
void    (*bsdsignal())();	/* in use our own signal routines */
#endif	/* SVR4 */

/*************************
 * Directory definitions *
 *************************/

/*
 * IT IS PREFERABLE TO DEFINE THE FOLLOWING DEFINITIONS IN THE MAKEFILE
 * BY SETTING 'TOPDIR' RATHER THAN INDIVIDUAL DEFINITIONS HERE.
 *
 * All program generate data fles in the DATADIR. The display program
 * opens and displayes all files in the DATADIR.
 *
 * The 'MSGSDIR' is used for the message display. Any file in this directory
 * will be treated as a ascii text file and its contents will be displayed in
 * the 'Message' sub-window in snips.
 *
 * The configuration and PID files are stored in the ETCDIR.
 *
 */
#ifndef DATADIR				/* data files in this dir */
# define DATADIR	"/usr/local/snips/data"
#endif

#ifndef MSGSDIR				/* special text msgs here */
# define MSGSDIR	"/usr/local/snips/msgs"
#endif

#ifndef ETCDIR				/* config & pid files */
# define ETCDIR		"/usr/local/snips/etc"
#endif

#ifndef JSONDIR                                /* json output files */
# define JSONDIR               "/usr/local/iris/data/spool"
#endif

#ifndef PIDDIR
# define PIDDIR		"/usr/local/snips/run"
#endif

#ifndef GLOBAL_CONFIG
# define GLOBAL_CONFIG	"/etc/snips.conf"
#endif

#define DATAFILE_MODE	0664		/* mode of data files = rw,rw,r */

#ifndef BUFSIZ		      		/* in stdio.h */
# define BUFSIZ 1024
#endif

#define MAXLINE		256		/* Randomly selected string length */


/****************************
 * The EVENT data structure *
 ****************************/

#ifdef NOCOL
# define DATA_VERSION	0x0	/* old NOCOL data format */
#else
# define MAGIC_STRING	{'\0', '\177', 'S', 'N', 'I', 'P', 'S'}
# define DATA_VERSION	0x1	/* SNIPS datafile version */
#endif

typedef char BYTE;		/* an 8-bit field */
#ifdef NOCOL
# define MAXPROGNM	12	/* Name of monitoring program */
# define MAXNMLEN	256	/* For device's name, can be nickname */
# define MAXADDRLEN	128	/* Ok for IP, decnet, OSI */
#else
# define MAXPROGNM	16	/* Name of monitoring program */
# define MAXNMLEN	256	/* For device's name, can be nickname */
# define MAXADDRLEN	128	/* Ok for IP, decnet, OSI */
#endif

/* DATA  structure of a snips EVENT */

/* device identifier */
typedef struct 
{
  char	name[MAXNMLEN];		/* devicename */ 
  char	addr[MAXADDRLEN];	/* address (or fqdn) of device */
  char	subdev[MAXNMLEN];	/* sub device (interface or disk, etc.) */
  u_int rtableid;
} DEVICE;	

/* variable info */
typedef struct
{
  char		name[MAXNMLEN];		/* name or keyword of variable */
  u_long	value;			/* variable value */
  u_long	threshold;		/* variable threshold, if applicable */
  char		units[8];		/* units of variable (pkts, ms) */
} VAR;

/*
 * EVENT structure.
 */
typedef struct 
{
  char	sender[MAXPROGNM];	/* 8 bytes of sender name */
  DEVICE	device;		/* device name, address */
  VAR		var;		/* variable info */
  unsigned char	severity;	/* event severity */
  unsigned char	loglevel;	/* for logging */
  unsigned char	state;		/* State of event = up/down/unknown */
  unsigned char rating;         /* result of prev 8 polls */
  u_long 	eventtime;	/* timestamp of last up or down */
  u_long 	polltime;	/* data timestamp (shows age) */
  u_long	op;		/* op data for internal  use */
  u_long	id;		/* Give unique ID to each event */
} EVENT;

/* Event severities. */
#define E_CRITICAL	1
#define E_ERROR		2
#define E_WARNING	3
#define E_INFO		4

/* Text used to refer to severity levels. First is null since start with 1 */
static char *severity_txt[] = {
    "BAD-0", "Critical", "Error", "Warning", "Info", "BAD-5"} ;

/* flags indicating various 'STATE's that a device can be in */
#define n_UP		0x01
#define n_DOWN		0x02
#define n_UNKNOWN	0x04			/* not tested yet ? */
#define n_TEST		0x08			/* Device in test mode */
#define n_NODISPLAY	0x10			/* Ignore while displaying */
#define n_OLDDATA	0x20

/*
 * Some flag operations on mask 'm'. Since UP, DOWN, UNKNOWN are mutually
 * exclusive, this macro sets the desired mask and clears the others
 * (No, the DOUN is not a typo, it stands for DOwn and UNknown
 */
#define SETF_UPDOUN(mask, f)	((mask & ~(n_UP | n_DOWN | n_UNKNOWN)) | (f))

struct state_txt_s {
    int		v ;
    char	*str ;		/* Text used to refer to state flags */
};
static struct state_txt_s state_txt[] = {
  {n_UP, "up"},
  {n_DOWN, "down"},
  {n_UNKNOWN, "unknown"},
  {n_TEST, "test"},
  {n_NODISPLAY ,"nodisplay"},
  {n_OLDDATA ,"old"},
  {0, ""}
} ;

/*** GLOBAL variables ***/
#ifdef _MAIN_
# define EXTERN
#else
# define EXTERN extern
#endif
#ifdef XS_VERSION		/* including in Perl XSUB */
# ifndef OLDPERL
EXTERN int	debug;	/* in old PERL versions, debug defined in perl.h */
# endif /* OLDPERL */
#else	/* not .xs file */
EXTERN int	debug;
#endif
EXTERN int	do_reload;	/* flag set on getting a HUP */
EXTERN int	autoreload;	/* auto re-read config file if modified */
EXTERN int	dorrd;		/* needed in rrd_funcs.c */
EXTERN time_t	pollinterval;
EXTERN char	*prognm;
EXTERN char	*extnm;		/* manual extension to add to prognm */
EXTERN int	(*help_func)();		/* ptr to a help function */
EXTERN int	(*readconfig_func)();
EXTERN int	(*polldevices_func)();
EXTERN u_long	(*test_func)();		/* ptr to actual test function */

#undef EXTERN
/*** END Global Variables ***/

/* some function definitions */
char *get_configfile(),  *get_datafile(), *get_pidfile();
char *Strdup();
time_t get_date (char *p, time_t *now);


#endif	/* _snips_h  */
